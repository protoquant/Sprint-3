
"""ftx_data.ipynb

Automatically generated by Colaboratory.



This Project was based on collected data from FTX website using their API

I Collected DATA from 

BTC
ETH
BNB
BCH
LTC
SOL
DOT
AVAX

Importing Required Packages
"""

from datetime import datetime
from dotenv import load_dotenv
import os
import json
import pandas as pd
import requests
import time

start = int(datetime(2020, 5, 23,0,0,0).timestamp())
end = int(datetime(2022, 5, 23,0,0,0).timestamp())
stamps = [start]

while stamps[-1] < end:
    stamp_delta = datetime.fromtimestamp(start) + timedelta(hours=4900)
    stamp = time.mktime(stamp_delta.timetuple())
    stamps.append(int(stamp))
    start = stamp

assets = ['BTC', 'ETH']

quote_currency = 'USD'
resolution=3600

def get_data(base_currency, quote_currency, stamps, resolution):
    no_of_stamps = len(stamps)
    all_data = {}
    for i in range(len(stamps)):
        if no_of_stamps < i:
            url = f"https://ftx.us/api/markets/{base_currency}/{quote_currency}/candles?resolution={resolution}&start_time={stamps[i]}&end_time={stamps[i+1]}&limit=5000"
        else:
            url = f"https://ftx.us/api/markets/{base_currency}/{quote_currency}/candles?resolution={resolution}&start_time={stamps[i]}&end_time={end}&limit=5000"
        res = requests.get(url).json()
        if len(all_data) == 0:
            all_data = res
        else:
            all_data['result'].extend(res['result'])
    return all_data

data = get_data(base_currency, quote_currency, sorted(stamps), resolution)

def pad_name(pad_last, df):
    old_col_names = list(df.columns)
    new_col_names = []
    for col in old_col_names:
        new_col_names.append(col+pad_last)
    df.rename(dict(zip(old_col_names, new_col_names)), axis=1, inplace=True) 
    return df

def collect_data(asset, quote_currency, stamps, resolution):

    historical = get_data(asset, quote_currency, stamps, resolution)

    # Convert JSON to Pandas DataFrame
    df = pd.DataFrame(historical['result'])
    df = df.drop_duplicates()

    #Convert time to date
    df['date'] = pd.to_datetime(
        df['time']/1000, unit='s', origin='unix'
    ) 

    format = '%Y-%m-%dT%H:%M:%S+00:00'

    df['startTime'] = df['startTime'].apply(lambda x: datetime.strptime(x, format))
    df.rename({'startTime':'timestamp'}, axis=1, inplace = True)
    df.drop(['time', 'date'], axis=1, inplace=True)

    asset_1H = df.set_index('timestamp').resample('1H').pad()
    asset_2H = df.set_index('timestamp').resample('2H').pad()
    asset_4H = df.set_index('timestamp').resample('4H').pad()
    asset_8H = df.set_index('timestamp').resample('8H').pad()
    asset_24H = df.set_index('timestamp').resample('24H').pad()
    asset_48H = df.set_index('timestamp').resample('48H').pad()
    asset_72H = df.set_index('timestamp').resample('72H').pad()

    col_name_change_1H = pad_name("_ftx_1H", asset_1H)
    col_name_change_2H = pad_name("_ftx_2H", asset_2H)
    col_name_change_4H = pad_name("_ftx_4H", asset_4H)
    col_name_change_8H = pad_name("_ftx_8H", asset_8H)
    # col_name_change_24H = pad_name("_ftx_24H", asset_24H)
    col_name_change_48H = pad_name("_ftx_48H", asset_48H)
    col_name_change_72H = pad_name("_ftx_72H", asset_72H)

    col_name_change_1H.to_csv(f'{asset}_ftx_1H.csv')
    col_name_change_2H.to_csv(f'{asset}_ftx_2H.csv')
    col_name_change_4H.to_csv(f'{asset}_ftx_4H.csv')
    col_name_change_8H.to_csv(f'{asset}_ftx_8H.csv')
    # col_name_change_24H.to_csv(f'{asset}_ftx_24H.csv')
    col_name_change_48H.to_csv(f'{asset}_ftx_48H.csv')
    col_name_change_72H.to_csv(f'{asset}_ftx_72H.csv')
    
    return 1

for asset in assets:
    
    collect_data(asset, quote_currency, stamps, resolution)
